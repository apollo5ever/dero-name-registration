{"ast":null,"code":"import { nanoid } from 'nanoid';\nexport default class DeroBridgeApi {\n  constructor() {\n    this.channel = new MessageChannel();\n    this.initialized = false;\n    this.resolves = new Map();\n  }\n\n  call(cmd) {\n    if (!this.initialized) return Promise.reject(new Error(`Not initialized.`));\n    const id = nanoid();\n    const msg = {\n      id,\n      cmd\n    };\n    const promise = new Promise((resolve, reject) => {\n      this.channel.port1.addEventListener('message', event => {\n        if (event.data.id === id) {\n          const {\n            err,\n            data\n          } = event.data;\n          if (data) resolve(data);else if (err) reject(err);else reject(new Error(`Empty event.`));\n        }\n\n        if (event.data === 'disconnected') {\n          this.initialized = false;\n          reject(event);\n        }\n      }, {\n        once: true\n      });\n      this.channel.port1.start();\n    });\n    this.channel.port1.postMessage(msg);\n    return promise;\n  }\n\n  daemon(action, args) {\n    return this.call({\n      entity: 'daemon',\n      action,\n      args\n    });\n  }\n\n  wallet(action, args) {\n    return this.call({\n      entity: 'wallet',\n      action,\n      args\n    });\n  }\n\n  init() {\n    if (this.initialized) return Promise.reject(new Error(`Already initialized.`));\n    return new Promise((resolve, reject) => {\n      let timeoutId = setTimeout(() => {\n        if (!this.initialized) reject(new Error(`Can't initialized.`));\n      }, 1000);\n      this.channel.port1.addEventListener('message', event => {\n        if (event.data === 'initialized') {\n          this.initialized = true;\n          resolve();\n        } else {\n          clearTimeout(timeoutId);\n          reject(new Error(`Can't initialized.`));\n        }\n      }, {\n        once: true\n      });\n      this.channel.port1.start();\n      window.postMessage('init-dero-bridge', '*', [this.channel.port2]);\n    });\n  }\n\n}","map":{"version":3,"names":["nanoid","DeroBridgeApi","constructor","channel","MessageChannel","initialized","resolves","Map","call","cmd","Promise","reject","Error","id","msg","promise","resolve","port1","addEventListener","event","data","err","once","start","postMessage","daemon","action","args","entity","wallet","init","timeoutId","setTimeout","clearTimeout","window","port2"],"sources":["/home/josho/Dero/dero-name-registration/src/api.js"],"sourcesContent":["import { nanoid } from 'nanoid'\n\nexport default class DeroBridgeApi {\n  constructor() {\n    this.channel = new MessageChannel()\n    this.initialized = false\n    this.resolves = new Map()\n  }\n\n  call(cmd) {\n    if (!this.initialized) return Promise.reject(new Error(`Not initialized.`))\n    const id = nanoid()\n    const msg = { id, cmd }\n    const promise = new Promise((resolve, reject) => {\n      this.channel.port1.addEventListener('message', (event) => {\n        if (event.data.id === id) {\n          const { err, data } = event.data\n          if (data) resolve(data)\n          else if (err) reject(err)\n          else reject(new Error(`Empty event.`))\n        }\n\n        if (event.data === 'disconnected') {\n          this.initialized = false\n          reject(event)\n        }\n      }, { once: true })\n\n      this.channel.port1.start()\n    })\n\n    this.channel.port1.postMessage(msg)\n    return promise\n  }\n\n  daemon(action, args) {\n    return this.call({ entity: 'daemon', action, args })\n  }\n\n  wallet(action, args) {\n    return this.call({ entity: 'wallet', action, args })\n  }\n\n  init() {\n    if (this.initialized) return Promise.reject(new Error(`Already initialized.`))\n\n    return new Promise((resolve, reject) => {\n      let timeoutId = setTimeout(() => {\n        if (!this.initialized) reject(new Error(`Can't initialized.`))\n      }, 1000)\n\n      this.channel.port1.addEventListener('message', (event) => {\n        if (event.data === 'initialized') {\n          this.initialized = true\n          resolve()\n        } else {\n          clearTimeout(timeoutId)\n          reject(new Error(`Can't initialized.`))\n        }\n      }, { once: true })\n\n      this.channel.port1.start()\n      window.postMessage('init-dero-bridge', '*', [this.channel.port2])\n    })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}